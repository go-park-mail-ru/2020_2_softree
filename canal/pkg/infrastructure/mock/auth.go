// Code generated by MockGen. DO NOT EDIT.
// Source: canal/pkg/domain/repository/auth.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
	entity "server/canal/pkg/domain/entity"
)

// MockAuthLogic is a mock of AuthLogic interface
type MockAuthLogic struct {
	ctrl     *gomock.Controller
	recorder *MockAuthLogicMockRecorder
}

// MockAuthLogicMockRecorder is the mock recorder for MockAuthLogic
type MockAuthLogicMockRecorder struct {
	mock *MockAuthLogic
}

// NewMockAuthLogic creates a new mock instance
func NewMockAuthLogic(ctrl *gomock.Controller) *MockAuthLogic {
	mock := &MockAuthLogic{ctrl: ctrl}
	mock.recorder = &MockAuthLogicMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAuthLogic) EXPECT() *MockAuthLogicMockRecorder {
	return m.recorder
}

// Login mocks base method
func (m *MockAuthLogic) Login(ctx context.Context, user entity.User) (entity.Description, entity.PublicUser, http.Cookie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, user)
	ret0, _ := ret[0].(entity.Description)
	ret1, _ := ret[1].(entity.PublicUser)
	ret2, _ := ret[2].(http.Cookie)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// Login indicates an expected call of Login
func (mr *MockAuthLogicMockRecorder) Login(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthLogic)(nil).Login), ctx, user)
}

// Logout mocks base method
func (m *MockAuthLogic) Logout(ctx context.Context, cookie *http.Cookie) (entity.Description, http.Cookie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", ctx, cookie)
	ret0, _ := ret[0].(entity.Description)
	ret1, _ := ret[1].(http.Cookie)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Logout indicates an expected call of Logout
func (mr *MockAuthLogicMockRecorder) Logout(ctx, cookie interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockAuthLogic)(nil).Logout), ctx, cookie)
}

// Signup mocks base method
func (m *MockAuthLogic) Signup(ctx context.Context, user entity.User) (entity.Description, entity.PublicUser, http.Cookie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Signup", ctx, user)
	ret0, _ := ret[0].(entity.Description)
	ret1, _ := ret[1].(entity.PublicUser)
	ret2, _ := ret[2].(http.Cookie)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// Signup indicates an expected call of Signup
func (mr *MockAuthLogicMockRecorder) Signup(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signup", reflect.TypeOf((*MockAuthLogic)(nil).Signup), ctx, user)
}

// Authenticate mocks base method
func (m *MockAuthLogic) Authenticate(ctx context.Context, userId int64) (entity.Description, entity.PublicUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate", ctx, userId)
	ret0, _ := ret[0].(entity.Description)
	ret1, _ := ret[1].(entity.PublicUser)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Authenticate indicates an expected call of Authenticate
func (mr *MockAuthLogicMockRecorder) Authenticate(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockAuthLogic)(nil).Authenticate), ctx, userId)
}

// Auth mocks base method
func (m *MockAuthLogic) Auth(ctx context.Context, cookie *http.Cookie) (entity.Description, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth", ctx, cookie)
	ret0, _ := ret[0].(entity.Description)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Auth indicates an expected call of Auth
func (mr *MockAuthLogicMockRecorder) Auth(ctx, cookie interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockAuthLogic)(nil).Auth), ctx, cookie)
}

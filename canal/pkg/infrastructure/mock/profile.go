// Code generated by MockGen. DO NOT EDIT.
// Source: canal/pkg/domain/repository/profile.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	entity "server/canal/pkg/domain/entity"
)

// MockProfileLogic is a mock of ProfileLogic interface
type MockProfileLogic struct {
	ctrl     *gomock.Controller
	recorder *MockProfileLogicMockRecorder
}

// MockProfileLogicMockRecorder is the mock recorder for MockProfileLogic
type MockProfileLogicMockRecorder struct {
	mock *MockProfileLogic
}

// NewMockProfileLogic creates a new mock instance
func NewMockProfileLogic(ctrl *gomock.Controller) *MockProfileLogic {
	mock := &MockProfileLogic{ctrl: ctrl}
	mock.recorder = &MockProfileLogicMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProfileLogic) EXPECT() *MockProfileLogicMockRecorder {
	return m.recorder
}

// UpdateAvatar mocks base method
func (m *MockProfileLogic) UpdateAvatar(ctx context.Context, user entity.User) (entity.Description, entity.PublicUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAvatar", ctx, user)
	ret0, _ := ret[0].(entity.Description)
	ret1, _ := ret[1].(entity.PublicUser)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateAvatar indicates an expected call of UpdateAvatar
func (mr *MockProfileLogicMockRecorder) UpdateAvatar(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAvatar", reflect.TypeOf((*MockProfileLogic)(nil).UpdateAvatar), ctx, user)
}

// UpdatePassword mocks base method
func (m *MockProfileLogic) UpdatePassword(ctx context.Context, user entity.User) (entity.Description, entity.PublicUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", ctx, user)
	ret0, _ := ret[0].(entity.Description)
	ret1, _ := ret[1].(entity.PublicUser)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdatePassword indicates an expected call of UpdatePassword
func (mr *MockProfileLogicMockRecorder) UpdatePassword(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockProfileLogic)(nil).UpdatePassword), ctx, user)
}

// ReceiveUser mocks base method
func (m *MockProfileLogic) ReceiveUser(ctx context.Context, id int64) (entity.Description, entity.PublicUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReceiveUser", ctx, id)
	ret0, _ := ret[0].(entity.Description)
	ret1, _ := ret[1].(entity.PublicUser)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReceiveUser indicates an expected call of ReceiveUser
func (mr *MockProfileLogicMockRecorder) ReceiveUser(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveUser", reflect.TypeOf((*MockProfileLogic)(nil).ReceiveUser), ctx, id)
}

// ReceiveWatchlist mocks base method
func (m *MockProfileLogic) ReceiveWatchlist(ctx context.Context, id int64) (entity.Description, entity.Currencies, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReceiveWatchlist", ctx, id)
	ret0, _ := ret[0].(entity.Description)
	ret1, _ := ret[1].(entity.Currencies)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReceiveWatchlist indicates an expected call of ReceiveWatchlist
func (mr *MockProfileLogicMockRecorder) ReceiveWatchlist(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveWatchlist", reflect.TypeOf((*MockProfileLogic)(nil).ReceiveWatchlist), ctx, id)
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// CurrencyServiceClient is the client API for CurrencyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CurrencyServiceClient interface {
	GetRates(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Currencies, error)
	GetRate(ctx context.Context, in *CurrencyTitle, opts ...grpc.CallOption) (*Currencies, error)
	GetLastRate(ctx context.Context, in *CurrencyTitle, opts ...grpc.CallOption) (*Currency, error)
	GetInitialDayCurrency(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*InitialDayCurrencies, error)
}

type currencyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCurrencyServiceClient(cc grpc.ClientConnInterface) CurrencyServiceClient {
	return &currencyServiceClient{cc}
}

func (c *currencyServiceClient) GetRates(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Currencies, error) {
	out := new(Currencies)
	err := c.cc.Invoke(ctx, "/currency.currencyService/GetRates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyServiceClient) GetRate(ctx context.Context, in *CurrencyTitle, opts ...grpc.CallOption) (*Currencies, error) {
	out := new(Currencies)
	err := c.cc.Invoke(ctx, "/currency.currencyService/GetRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyServiceClient) GetLastRate(ctx context.Context, in *CurrencyTitle, opts ...grpc.CallOption) (*Currency, error) {
	out := new(Currency)
	err := c.cc.Invoke(ctx, "/currency.currencyService/GetLastRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyServiceClient) GetInitialDayCurrency(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*InitialDayCurrencies, error) {
	out := new(InitialDayCurrencies)
	err := c.cc.Invoke(ctx, "/currency.currencyService/GetInitialDayCurrency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CurrencyServiceServer is the server API for CurrencyService service.
// All implementations must embed UnimplementedCurrencyServiceServer
// for forward compatibility
type CurrencyServiceServer interface {
	GetRates(context.Context, *Empty) (*Currencies, error)
	GetRate(context.Context, *CurrencyTitle) (*Currencies, error)
	GetLastRate(context.Context, *CurrencyTitle) (*Currency, error)
	GetInitialDayCurrency(context.Context, *Empty) (*InitialDayCurrencies, error)
	mustEmbedUnimplementedCurrencyServiceServer()
}

// UnimplementedCurrencyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCurrencyServiceServer struct {
}

func (UnimplementedCurrencyServiceServer) GetRates(context.Context, *Empty) (*Currencies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRates not implemented")
}
func (UnimplementedCurrencyServiceServer) GetRate(context.Context, *CurrencyTitle) (*Currencies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRate not implemented")
}
func (UnimplementedCurrencyServiceServer) GetLastRate(context.Context, *CurrencyTitle) (*Currency, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastRate not implemented")
}
func (UnimplementedCurrencyServiceServer) GetInitialDayCurrency(context.Context, *Empty) (*InitialDayCurrencies, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInitialDayCurrency not implemented")
}
func (UnimplementedCurrencyServiceServer) mustEmbedUnimplementedCurrencyServiceServer() {}

// UnsafeCurrencyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CurrencyServiceServer will
// result in compilation errors.
type UnsafeCurrencyServiceServer interface {
	mustEmbedUnimplementedCurrencyServiceServer()
}

func RegisterCurrencyServiceServer(s grpc.ServiceRegistrar, srv CurrencyServiceServer) {
	s.RegisterService(&_CurrencyService_serviceDesc, srv)
}

func _CurrencyService_GetRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyServiceServer).GetRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/currency.currencyService/GetRates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyServiceServer).GetRates(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyService_GetRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrencyTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyServiceServer).GetRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/currency.currencyService/GetRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyServiceServer).GetRate(ctx, req.(*CurrencyTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyService_GetLastRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrencyTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyServiceServer).GetLastRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/currency.currencyService/GetLastRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyServiceServer).GetLastRate(ctx, req.(*CurrencyTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyService_GetInitialDayCurrency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyServiceServer).GetInitialDayCurrency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/currency.currencyService/GetInitialDayCurrency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyServiceServer).GetInitialDayCurrency(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _CurrencyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "currency.currencyService",
	HandlerType: (*CurrencyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRates",
			Handler:    _CurrencyService_GetRates_Handler,
		},
		{
			MethodName: "GetRate",
			Handler:    _CurrencyService_GetRate_Handler,
		},
		{
			MethodName: "GetLastRate",
			Handler:    _CurrencyService_GetLastRate_Handler,
		},
		{
			MethodName: "GetInitialDayCurrency",
			Handler:    _CurrencyService_GetInitialDayCurrency_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "currency.proto",
}

// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package gen

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonEd48c049DecodeServerCurrencyPkgCurrencyGen(in *jlexer.Lexer, out *currencyServiceClient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEd48c049EncodeServerCurrencyPkgCurrencyGen(out *jwriter.Writer, in currencyServiceClient) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v currencyServiceClient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEd48c049EncodeServerCurrencyPkgCurrencyGen(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v currencyServiceClient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEd48c049EncodeServerCurrencyPkgCurrencyGen(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *currencyServiceClient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEd48c049DecodeServerCurrencyPkgCurrencyGen(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *currencyServiceClient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEd48c049DecodeServerCurrencyPkgCurrencyGen(l, v)
}
func easyjsonEd48c049DecodeServerCurrencyPkgCurrencyGen1(in *jlexer.Lexer, out *UnimplementedCurrencyServiceServer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEd48c049EncodeServerCurrencyPkgCurrencyGen1(out *jwriter.Writer, in UnimplementedCurrencyServiceServer) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UnimplementedCurrencyServiceServer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEd48c049EncodeServerCurrencyPkgCurrencyGen1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UnimplementedCurrencyServiceServer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEd48c049EncodeServerCurrencyPkgCurrencyGen1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UnimplementedCurrencyServiceServer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEd48c049DecodeServerCurrencyPkgCurrencyGen1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UnimplementedCurrencyServiceServer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEd48c049DecodeServerCurrencyPkgCurrencyGen1(l, v)
}
func easyjsonEd48c049DecodeServerCurrencyPkgCurrencyGen2(in *jlexer.Lexer, out *InitialDayCurrency) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.Title = string(in.String())
		case "value":
			out.Value = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEd48c049EncodeServerCurrencyPkgCurrencyGen2(out *jwriter.Writer, in InitialDayCurrency) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Title != "" {
		const prefix string = ",\"title\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	if in.Value != 0 {
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InitialDayCurrency) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEd48c049EncodeServerCurrencyPkgCurrencyGen2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InitialDayCurrency) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEd48c049EncodeServerCurrencyPkgCurrencyGen2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InitialDayCurrency) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEd48c049DecodeServerCurrencyPkgCurrencyGen2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InitialDayCurrency) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEd48c049DecodeServerCurrencyPkgCurrencyGen2(l, v)
}
func easyjsonEd48c049DecodeServerCurrencyPkgCurrencyGen3(in *jlexer.Lexer, out *InitialDayCurrencies) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "currencies":
			if in.IsNull() {
				in.Skip()
				out.Currencies = nil
			} else {
				in.Delim('[')
				if out.Currencies == nil {
					if !in.IsDelim(']') {
						out.Currencies = make([]*InitialDayCurrency, 0, 8)
					} else {
						out.Currencies = []*InitialDayCurrency{}
					}
				} else {
					out.Currencies = (out.Currencies)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *InitialDayCurrency
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(InitialDayCurrency)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Currencies = append(out.Currencies, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEd48c049EncodeServerCurrencyPkgCurrencyGen3(out *jwriter.Writer, in InitialDayCurrencies) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Currencies) != 0 {
		const prefix string = ",\"currencies\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v2, v3 := range in.Currencies {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InitialDayCurrencies) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEd48c049EncodeServerCurrencyPkgCurrencyGen3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InitialDayCurrencies) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEd48c049EncodeServerCurrencyPkgCurrencyGen3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InitialDayCurrencies) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEd48c049DecodeServerCurrencyPkgCurrencyGen3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InitialDayCurrencies) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEd48c049DecodeServerCurrencyPkgCurrencyGen3(l, v)
}
func easyjsonEd48c049DecodeServerCurrencyPkgCurrencyGen4(in *jlexer.Lexer, out *Empty) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEd48c049EncodeServerCurrencyPkgCurrencyGen4(out *jwriter.Writer, in Empty) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Empty) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEd48c049EncodeServerCurrencyPkgCurrencyGen4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Empty) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEd48c049EncodeServerCurrencyPkgCurrencyGen4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Empty) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEd48c049DecodeServerCurrencyPkgCurrencyGen4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Empty) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEd48c049DecodeServerCurrencyPkgCurrencyGen4(l, v)
}
func easyjsonEd48c049DecodeServerCurrencyPkgCurrencyGen5(in *jlexer.Lexer, out *CurrencyTitle) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.Title = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEd48c049EncodeServerCurrencyPkgCurrencyGen5(out *jwriter.Writer, in CurrencyTitle) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Title != "" {
		const prefix string = ",\"title\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CurrencyTitle) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEd48c049EncodeServerCurrencyPkgCurrencyGen5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CurrencyTitle) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEd48c049EncodeServerCurrencyPkgCurrencyGen5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CurrencyTitle) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEd48c049DecodeServerCurrencyPkgCurrencyGen5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CurrencyTitle) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEd48c049DecodeServerCurrencyPkgCurrencyGen5(l, v)
}
func easyjsonEd48c049DecodeServerCurrencyPkgCurrencyGen6(in *jlexer.Lexer, out *Currency) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.Title = string(in.String())
		case "value":
			out.Value = float64(in.Float64())
		case "updated_at":
			if in.IsNull() {
				in.Skip()
				out.UpdatedAt = nil
			} else {
				if out.UpdatedAt == nil {
					out.UpdatedAt = new(timestamppb.Timestamp)
				}
				easyjsonEd48c049DecodeGoogleGolangOrgProtobufTypesKnownTimestamppb(in, out.UpdatedAt)
			}
		case "base":
			out.Base = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEd48c049EncodeServerCurrencyPkgCurrencyGen6(out *jwriter.Writer, in Currency) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Title != "" {
		const prefix string = ",\"title\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	if in.Value != 0 {
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Value))
	}
	if in.UpdatedAt != nil {
		const prefix string = ",\"updated_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjsonEd48c049EncodeGoogleGolangOrgProtobufTypesKnownTimestamppb(out, *in.UpdatedAt)
	}
	if in.Base != "" {
		const prefix string = ",\"base\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Base))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Currency) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEd48c049EncodeServerCurrencyPkgCurrencyGen6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Currency) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEd48c049EncodeServerCurrencyPkgCurrencyGen6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Currency) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEd48c049DecodeServerCurrencyPkgCurrencyGen6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Currency) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEd48c049DecodeServerCurrencyPkgCurrencyGen6(l, v)
}
func easyjsonEd48c049DecodeGoogleGolangOrgProtobufTypesKnownTimestamppb(in *jlexer.Lexer, out *timestamppb.Timestamp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "seconds":
			out.Seconds = int64(in.Int64())
		case "nanos":
			out.Nanos = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEd48c049EncodeGoogleGolangOrgProtobufTypesKnownTimestamppb(out *jwriter.Writer, in timestamppb.Timestamp) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Seconds != 0 {
		const prefix string = ",\"seconds\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.Seconds))
	}
	if in.Nanos != 0 {
		const prefix string = ",\"nanos\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Nanos))
	}
	out.RawByte('}')
}
func easyjsonEd48c049DecodeServerCurrencyPkgCurrencyGen7(in *jlexer.Lexer, out *Currencies) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "rates":
			if in.IsNull() {
				in.Skip()
				out.Rates = nil
			} else {
				in.Delim('[')
				if out.Rates == nil {
					if !in.IsDelim(']') {
						out.Rates = make([]*Currency, 0, 8)
					} else {
						out.Rates = []*Currency{}
					}
				} else {
					out.Rates = (out.Rates)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *Currency
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(Currency)
						}
						(*v4).UnmarshalEasyJSON(in)
					}
					out.Rates = append(out.Rates, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonEd48c049EncodeServerCurrencyPkgCurrencyGen7(out *jwriter.Writer, in Currencies) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Rates) != 0 {
		const prefix string = ",\"rates\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v5, v6 := range in.Rates {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					(*v6).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Currencies) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonEd48c049EncodeServerCurrencyPkgCurrencyGen7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Currencies) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonEd48c049EncodeServerCurrencyPkgCurrencyGen7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Currencies) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonEd48c049DecodeServerCurrencyPkgCurrencyGen7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Currencies) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonEd48c049DecodeServerCurrencyPkgCurrencyGen7(l, v)
}

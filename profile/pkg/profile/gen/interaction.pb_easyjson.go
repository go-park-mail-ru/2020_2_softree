// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package gen

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson1a505264DecodeServerProfilePkgProfileGen(in *jlexer.Lexer, out *profileServiceClient) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1a505264EncodeServerProfilePkgProfileGen(out *jwriter.Writer, in profileServiceClient) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v profileServiceClient) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1a505264EncodeServerProfilePkgProfileGen(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v profileServiceClient) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1a505264EncodeServerProfilePkgProfileGen(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *profileServiceClient) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1a505264DecodeServerProfilePkgProfileGen(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *profileServiceClient) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1a505264DecodeServerProfilePkgProfileGen(l, v)
}
func easyjson1a505264DecodeServerProfilePkgProfileGen1(in *jlexer.Lexer, out *Wallets) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "wallets":
			if in.IsNull() {
				in.Skip()
				out.Wallets = nil
			} else {
				in.Delim('[')
				if out.Wallets == nil {
					if !in.IsDelim(']') {
						out.Wallets = make([]*Wallet, 0, 8)
					} else {
						out.Wallets = []*Wallet{}
					}
				} else {
					out.Wallets = (out.Wallets)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *Wallet
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(Wallet)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Wallets = append(out.Wallets, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1a505264EncodeServerProfilePkgProfileGen1(out *jwriter.Writer, in Wallets) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Wallets) != 0 {
		const prefix string = ",\"wallets\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v2, v3 := range in.Wallets {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Wallets) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1a505264EncodeServerProfilePkgProfileGen1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Wallets) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1a505264EncodeServerProfilePkgProfileGen1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Wallets) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1a505264DecodeServerProfilePkgProfileGen1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Wallets) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1a505264DecodeServerProfilePkgProfileGen1(l, v)
}
func easyjson1a505264DecodeServerProfilePkgProfileGen2(in *jlexer.Lexer, out *Wallet) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.Title = string(in.String())
		case "value":
			out.Value = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1a505264EncodeServerProfilePkgProfileGen2(out *jwriter.Writer, in Wallet) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Title != "" {
		const prefix string = ",\"title\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	if in.Value != 0 {
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Wallet) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1a505264EncodeServerProfilePkgProfileGen2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Wallet) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1a505264EncodeServerProfilePkgProfileGen2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Wallet) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1a505264DecodeServerProfilePkgProfileGen2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Wallet) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1a505264DecodeServerProfilePkgProfileGen2(l, v)
}
func easyjson1a505264DecodeServerProfilePkgProfileGen3(in *jlexer.Lexer, out *UsersCount) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "num":
			out.Num = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1a505264EncodeServerProfilePkgProfileGen3(out *jwriter.Writer, in UsersCount) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Num != 0 {
		const prefix string = ",\"num\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.Num))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UsersCount) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1a505264EncodeServerProfilePkgProfileGen3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UsersCount) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1a505264EncodeServerProfilePkgProfileGen3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UsersCount) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1a505264DecodeServerProfilePkgProfileGen3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UsersCount) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1a505264DecodeServerProfilePkgProfileGen3(l, v)
}
func easyjson1a505264DecodeServerProfilePkgProfileGen4(in *jlexer.Lexer, out *UserID) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1a505264EncodeServerProfilePkgProfileGen4(out *jwriter.Writer, in UserID) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.Id))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserID) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1a505264EncodeServerProfilePkgProfileGen4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserID) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1a505264EncodeServerProfilePkgProfileGen4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserID) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1a505264DecodeServerProfilePkgProfileGen4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserID) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1a505264DecodeServerProfilePkgProfileGen4(l, v)
}
func easyjson1a505264DecodeServerProfilePkgProfileGen5(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int64(in.Int64())
		case "email":
			out.Email = string(in.String())
		case "password":
			out.Password = string(in.String())
		case "password_to_check":
			out.PasswordToCheck = string(in.String())
		case "old_password":
			out.OldPassword = string(in.String())
		case "new_password":
			out.NewPassword = string(in.String())
		case "avatar":
			out.Avatar = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1a505264EncodeServerProfilePkgProfileGen5(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.Id))
	}
	if in.Email != "" {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	if in.Password != "" {
		const prefix string = ",\"password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Password))
	}
	if in.PasswordToCheck != "" {
		const prefix string = ",\"password_to_check\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PasswordToCheck))
	}
	if in.OldPassword != "" {
		const prefix string = ",\"old_password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.OldPassword))
	}
	if in.NewPassword != "" {
		const prefix string = ",\"new_password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.NewPassword))
	}
	if in.Avatar != "" {
		const prefix string = ",\"avatar\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Avatar))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1a505264EncodeServerProfilePkgProfileGen5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1a505264EncodeServerProfilePkgProfileGen5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1a505264DecodeServerProfilePkgProfileGen5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1a505264DecodeServerProfilePkgProfileGen5(l, v)
}
func easyjson1a505264DecodeServerProfilePkgProfileGen6(in *jlexer.Lexer, out *UpdateFields) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int64(in.Int64())
		case "user":
			if in.IsNull() {
				in.Skip()
				out.User = nil
			} else {
				if out.User == nil {
					out.User = new(User)
				}
				(*out.User).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1a505264EncodeServerProfilePkgProfileGen6(out *jwriter.Writer, in UpdateFields) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.Id))
	}
	if in.User != nil {
		const prefix string = ",\"user\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.User).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpdateFields) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1a505264EncodeServerProfilePkgProfileGen6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpdateFields) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1a505264EncodeServerProfilePkgProfileGen6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpdateFields) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1a505264DecodeServerProfilePkgProfileGen6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpdateFields) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1a505264DecodeServerProfilePkgProfileGen6(l, v)
}
func easyjson1a505264DecodeServerProfilePkgProfileGen7(in *jlexer.Lexer, out *UnimplementedProfileServiceServer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1a505264EncodeServerProfilePkgProfileGen7(out *jwriter.Writer, in UnimplementedProfileServiceServer) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UnimplementedProfileServiceServer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1a505264EncodeServerProfilePkgProfileGen7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UnimplementedProfileServiceServer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1a505264EncodeServerProfilePkgProfileGen7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UnimplementedProfileServiceServer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1a505264DecodeServerProfilePkgProfileGen7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UnimplementedProfileServiceServer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1a505264DecodeServerProfilePkgProfileGen7(l, v)
}
func easyjson1a505264DecodeServerProfilePkgProfileGen8(in *jlexer.Lexer, out *ToSetWallet) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int64(in.Int64())
		case "new_wallet":
			if in.IsNull() {
				in.Skip()
				out.NewWallet = nil
			} else {
				if out.NewWallet == nil {
					out.NewWallet = new(Wallet)
				}
				(*out.NewWallet).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1a505264EncodeServerProfilePkgProfileGen8(out *jwriter.Writer, in ToSetWallet) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.Id))
	}
	if in.NewWallet != nil {
		const prefix string = ",\"new_wallet\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.NewWallet).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ToSetWallet) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1a505264EncodeServerProfilePkgProfileGen8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ToSetWallet) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1a505264EncodeServerProfilePkgProfileGen8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ToSetWallet) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1a505264DecodeServerProfilePkgProfileGen8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ToSetWallet) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1a505264DecodeServerProfilePkgProfileGen8(l, v)
}
func easyjson1a505264DecodeServerProfilePkgProfileGen9(in *jlexer.Lexer, out *PublicUser) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int64(in.Int64())
		case "email":
			out.Email = string(in.String())
		case "avatar":
			out.Avatar = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1a505264EncodeServerProfilePkgProfileGen9(out *jwriter.Writer, in PublicUser) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.Id))
	}
	if in.Email != "" {
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	if in.Avatar != "" {
		const prefix string = ",\"avatar\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Avatar))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PublicUser) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1a505264EncodeServerProfilePkgProfileGen9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PublicUser) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1a505264EncodeServerProfilePkgProfileGen9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PublicUser) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1a505264DecodeServerProfilePkgProfileGen9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PublicUser) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1a505264DecodeServerProfilePkgProfileGen9(l, v)
}
func easyjson1a505264DecodeServerProfilePkgProfileGen10(in *jlexer.Lexer, out *PortfolioValue) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int64(in.Int64())
		case "value":
			out.Value = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1a505264EncodeServerProfilePkgProfileGen10(out *jwriter.Writer, in PortfolioValue) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.Id))
	}
	if in.Value != 0 {
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PortfolioValue) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1a505264EncodeServerProfilePkgProfileGen10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PortfolioValue) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1a505264EncodeServerProfilePkgProfileGen10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PortfolioValue) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1a505264DecodeServerProfilePkgProfileGen10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PortfolioValue) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1a505264DecodeServerProfilePkgProfileGen10(l, v)
}
func easyjson1a505264DecodeServerProfilePkgProfileGen11(in *jlexer.Lexer, out *PaymentHistory) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "currency":
			out.Currency = string(in.String())
		case "base":
			out.Base = string(in.String())
		case "amount":
			out.Amount = float64(in.Float64())
		case "sell":
			out.Sell = string(in.String())
		case "updated_at":
			if in.IsNull() {
				in.Skip()
				out.UpdatedAt = nil
			} else {
				if out.UpdatedAt == nil {
					out.UpdatedAt = new(timestamppb.Timestamp)
				}
				easyjson1a505264DecodeGoogleGolangOrgProtobufTypesKnownTimestamppb(in, out.UpdatedAt)
			}
		case "value":
			out.Value = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1a505264EncodeServerProfilePkgProfileGen11(out *jwriter.Writer, in PaymentHistory) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Currency != "" {
		const prefix string = ",\"currency\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Currency))
	}
	if in.Base != "" {
		const prefix string = ",\"base\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Base))
	}
	if in.Amount != 0 {
		const prefix string = ",\"amount\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Amount))
	}
	if in.Sell != "" {
		const prefix string = ",\"sell\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Sell))
	}
	if in.UpdatedAt != nil {
		const prefix string = ",\"updated_at\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		easyjson1a505264EncodeGoogleGolangOrgProtobufTypesKnownTimestamppb(out, *in.UpdatedAt)
	}
	if in.Value != 0 {
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PaymentHistory) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1a505264EncodeServerProfilePkgProfileGen11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PaymentHistory) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1a505264EncodeServerProfilePkgProfileGen11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PaymentHistory) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1a505264DecodeServerProfilePkgProfileGen11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PaymentHistory) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1a505264DecodeServerProfilePkgProfileGen11(l, v)
}
func easyjson1a505264DecodeGoogleGolangOrgProtobufTypesKnownTimestamppb(in *jlexer.Lexer, out *timestamppb.Timestamp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "seconds":
			out.Seconds = int64(in.Int64())
		case "nanos":
			out.Nanos = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1a505264EncodeGoogleGolangOrgProtobufTypesKnownTimestamppb(out *jwriter.Writer, in timestamppb.Timestamp) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Seconds != 0 {
		const prefix string = ",\"seconds\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.Seconds))
	}
	if in.Nanos != 0 {
		const prefix string = ",\"nanos\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(in.Nanos))
	}
	out.RawByte('}')
}
func easyjson1a505264DecodeServerProfilePkgProfileGen12(in *jlexer.Lexer, out *IncomeParameters) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int64(in.Int64())
		case "period":
			out.Period = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1a505264EncodeServerProfilePkgProfileGen12(out *jwriter.Writer, in IncomeParameters) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.Id))
	}
	if in.Period != "" {
		const prefix string = ",\"period\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Period))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IncomeParameters) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1a505264EncodeServerProfilePkgProfileGen12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IncomeParameters) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1a505264EncodeServerProfilePkgProfileGen12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IncomeParameters) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1a505264DecodeServerProfilePkgProfileGen12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IncomeParameters) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1a505264DecodeServerProfilePkgProfileGen12(l, v)
}
func easyjson1a505264DecodeServerProfilePkgProfileGen13(in *jlexer.Lexer, out *Income) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "change":
			out.Change = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1a505264EncodeServerProfilePkgProfileGen13(out *jwriter.Writer, in Income) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Change != 0 {
		const prefix string = ",\"change\":"
		first = false
		out.RawString(prefix[1:])
		out.Float64(float64(in.Change))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Income) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1a505264EncodeServerProfilePkgProfileGen13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Income) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1a505264EncodeServerProfilePkgProfileGen13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Income) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1a505264DecodeServerProfilePkgProfileGen13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Income) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1a505264DecodeServerProfilePkgProfileGen13(l, v)
}
func easyjson1a505264DecodeServerProfilePkgProfileGen14(in *jlexer.Lexer, out *Empty) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1a505264EncodeServerProfilePkgProfileGen14(out *jwriter.Writer, in Empty) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Empty) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1a505264EncodeServerProfilePkgProfileGen14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Empty) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1a505264EncodeServerProfilePkgProfileGen14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Empty) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1a505264DecodeServerProfilePkgProfileGen14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Empty) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1a505264DecodeServerProfilePkgProfileGen14(l, v)
}
func easyjson1a505264DecodeServerProfilePkgProfileGen15(in *jlexer.Lexer, out *Currency) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "base":
			out.Base = string(in.String())
		case "title":
			out.Title = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1a505264EncodeServerProfilePkgProfileGen15(out *jwriter.Writer, in Currency) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Base != "" {
		const prefix string = ",\"base\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Base))
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Currency) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1a505264EncodeServerProfilePkgProfileGen15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Currency) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1a505264EncodeServerProfilePkgProfileGen15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Currency) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1a505264DecodeServerProfilePkgProfileGen15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Currency) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1a505264DecodeServerProfilePkgProfileGen15(l, v)
}
func easyjson1a505264DecodeServerProfilePkgProfileGen16(in *jlexer.Lexer, out *Currencies) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "currencies":
			if in.IsNull() {
				in.Skip()
				out.Currencies = nil
			} else {
				in.Delim('[')
				if out.Currencies == nil {
					if !in.IsDelim(']') {
						out.Currencies = make([]*Currency, 0, 8)
					} else {
						out.Currencies = []*Currency{}
					}
				} else {
					out.Currencies = (out.Currencies)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *Currency
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(Currency)
						}
						(*v4).UnmarshalEasyJSON(in)
					}
					out.Currencies = append(out.Currencies, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1a505264EncodeServerProfilePkgProfileGen16(out *jwriter.Writer, in Currencies) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Currencies) != 0 {
		const prefix string = ",\"currencies\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v5, v6 := range in.Currencies {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					(*v6).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Currencies) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1a505264EncodeServerProfilePkgProfileGen16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Currencies) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1a505264EncodeServerProfilePkgProfileGen16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Currencies) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1a505264DecodeServerProfilePkgProfileGen16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Currencies) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1a505264DecodeServerProfilePkgProfileGen16(l, v)
}
func easyjson1a505264DecodeServerProfilePkgProfileGen17(in *jlexer.Lexer, out *ConcreteWallet) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int64(in.Int64())
		case "title":
			out.Title = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1a505264EncodeServerProfilePkgProfileGen17(out *jwriter.Writer, in ConcreteWallet) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.Id))
	}
	if in.Title != "" {
		const prefix string = ",\"title\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Title))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ConcreteWallet) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1a505264EncodeServerProfilePkgProfileGen17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ConcreteWallet) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1a505264EncodeServerProfilePkgProfileGen17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ConcreteWallet) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1a505264DecodeServerProfilePkgProfileGen17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ConcreteWallet) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1a505264DecodeServerProfilePkgProfileGen17(l, v)
}
func easyjson1a505264DecodeServerProfilePkgProfileGen18(in *jlexer.Lexer, out *Check) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "existence":
			out.Existence = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1a505264EncodeServerProfilePkgProfileGen18(out *jwriter.Writer, in Check) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Existence {
		const prefix string = ",\"existence\":"
		first = false
		out.RawString(prefix[1:])
		out.Bool(bool(in.Existence))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Check) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1a505264EncodeServerProfilePkgProfileGen18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Check) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1a505264EncodeServerProfilePkgProfileGen18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Check) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1a505264DecodeServerProfilePkgProfileGen18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Check) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1a505264DecodeServerProfilePkgProfileGen18(l, v)
}
func easyjson1a505264DecodeServerProfilePkgProfileGen19(in *jlexer.Lexer, out *AllHistory) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "history":
			if in.IsNull() {
				in.Skip()
				out.History = nil
			} else {
				in.Delim('[')
				if out.History == nil {
					if !in.IsDelim(']') {
						out.History = make([]*PaymentHistory, 0, 8)
					} else {
						out.History = []*PaymentHistory{}
					}
				} else {
					out.History = (out.History)[:0]
				}
				for !in.IsDelim(']') {
					var v7 *PaymentHistory
					if in.IsNull() {
						in.Skip()
						v7 = nil
					} else {
						if v7 == nil {
							v7 = new(PaymentHistory)
						}
						(*v7).UnmarshalEasyJSON(in)
					}
					out.History = append(out.History, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1a505264EncodeServerProfilePkgProfileGen19(out *jwriter.Writer, in AllHistory) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.History) != 0 {
		const prefix string = ",\"history\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v8, v9 := range in.History {
				if v8 > 0 {
					out.RawByte(',')
				}
				if v9 == nil {
					out.RawString("null")
				} else {
					(*v9).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AllHistory) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1a505264EncodeServerProfilePkgProfileGen19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AllHistory) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1a505264EncodeServerProfilePkgProfileGen19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AllHistory) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1a505264DecodeServerProfilePkgProfileGen19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AllHistory) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1a505264DecodeServerProfilePkgProfileGen19(l, v)
}
func easyjson1a505264DecodeServerProfilePkgProfileGen20(in *jlexer.Lexer, out *AddToHistory) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int64(in.Int64())
		case "transaction":
			if in.IsNull() {
				in.Skip()
				out.Transaction = nil
			} else {
				if out.Transaction == nil {
					out.Transaction = new(PaymentHistory)
				}
				(*out.Transaction).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1a505264EncodeServerProfilePkgProfileGen20(out *jwriter.Writer, in AddToHistory) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Id != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(in.Id))
	}
	if in.Transaction != nil {
		const prefix string = ",\"transaction\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.Transaction).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AddToHistory) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1a505264EncodeServerProfilePkgProfileGen20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AddToHistory) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1a505264EncodeServerProfilePkgProfileGen20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AddToHistory) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1a505264DecodeServerProfilePkgProfileGen20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AddToHistory) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1a505264DecodeServerProfilePkgProfileGen20(l, v)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: interaction.pb.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
	gen "server/profile/pkg/profile/gen"
)

// MockProfileServiceClient is a mock of ProfileServiceClient interface
type MockProfileServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockProfileServiceClientMockRecorder
}

// MockProfileServiceClientMockRecorder is the mock recorder for MockProfileServiceClient
type MockProfileServiceClientMockRecorder struct {
	mock *MockProfileServiceClient
}

// NewMockProfileServiceClient creates a new mock instance
func NewMockProfileServiceClient(ctrl *gomock.Controller) *MockProfileServiceClient {
	mock := &MockProfileServiceClient{ctrl: ctrl}
	mock.recorder = &MockProfileServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProfileServiceClient) EXPECT() *MockProfileServiceClientMockRecorder {
	return m.recorder
}

// SaveUser mocks base method
func (m *MockProfileServiceClient) SaveUser(ctx context.Context, in *gen.User, opts ...grpc.CallOption) (*gen.PublicUser, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SaveUser", varargs...)
	ret0, _ := ret[0].(*gen.PublicUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveUser indicates an expected call of SaveUser
func (mr *MockProfileServiceClientMockRecorder) SaveUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUser", reflect.TypeOf((*MockProfileServiceClient)(nil).SaveUser), varargs...)
}

// UpdateUserAvatar mocks base method
func (m *MockProfileServiceClient) UpdateUserAvatar(ctx context.Context, in *gen.UpdateFields, opts ...grpc.CallOption) (*gen.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUserAvatar", varargs...)
	ret0, _ := ret[0].(*gen.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserAvatar indicates an expected call of UpdateUserAvatar
func (mr *MockProfileServiceClientMockRecorder) UpdateUserAvatar(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserAvatar", reflect.TypeOf((*MockProfileServiceClient)(nil).UpdateUserAvatar), varargs...)
}

// UpdateUserPassword mocks base method
func (m *MockProfileServiceClient) UpdateUserPassword(ctx context.Context, in *gen.UpdateFields, opts ...grpc.CallOption) (*gen.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUserPassword", varargs...)
	ret0, _ := ret[0].(*gen.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserPassword indicates an expected call of UpdateUserPassword
func (mr *MockProfileServiceClientMockRecorder) UpdateUserPassword(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPassword", reflect.TypeOf((*MockProfileServiceClient)(nil).UpdateUserPassword), varargs...)
}

// DeleteUser mocks base method
func (m *MockProfileServiceClient) DeleteUser(ctx context.Context, in *gen.UserID, opts ...grpc.CallOption) (*gen.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteUser", varargs...)
	ret0, _ := ret[0].(*gen.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser
func (mr *MockProfileServiceClientMockRecorder) DeleteUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockProfileServiceClient)(nil).DeleteUser), varargs...)
}

// GetUserById mocks base method
func (m *MockProfileServiceClient) GetUserById(ctx context.Context, in *gen.UserID, opts ...grpc.CallOption) (*gen.PublicUser, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserById", varargs...)
	ret0, _ := ret[0].(*gen.PublicUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById
func (mr *MockProfileServiceClientMockRecorder) GetUserById(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockProfileServiceClient)(nil).GetUserById), varargs...)
}

// GetUserByLogin mocks base method
func (m *MockProfileServiceClient) GetUserByLogin(ctx context.Context, in *gen.User, opts ...grpc.CallOption) (*gen.PublicUser, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserByLogin", varargs...)
	ret0, _ := ret[0].(*gen.PublicUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByLogin indicates an expected call of GetUserByLogin
func (mr *MockProfileServiceClientMockRecorder) GetUserByLogin(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByLogin", reflect.TypeOf((*MockProfileServiceClient)(nil).GetUserByLogin), varargs...)
}

// CheckExistence mocks base method
func (m *MockProfileServiceClient) CheckExistence(ctx context.Context, in *gen.User, opts ...grpc.CallOption) (*gen.Check, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckExistence", varargs...)
	ret0, _ := ret[0].(*gen.Check)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckExistence indicates an expected call of CheckExistence
func (mr *MockProfileServiceClientMockRecorder) CheckExistence(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExistence", reflect.TypeOf((*MockProfileServiceClient)(nil).CheckExistence), varargs...)
}

// GetPassword mocks base method
func (m *MockProfileServiceClient) GetPassword(ctx context.Context, in *gen.User, opts ...grpc.CallOption) (*gen.User, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPassword", varargs...)
	ret0, _ := ret[0].(*gen.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPassword indicates an expected call of GetPassword
func (mr *MockProfileServiceClientMockRecorder) GetPassword(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPassword", reflect.TypeOf((*MockProfileServiceClient)(nil).GetPassword), varargs...)
}

// GetUserWatchlist mocks base method
func (m *MockProfileServiceClient) GetUserWatchlist(ctx context.Context, in *gen.UserID, opts ...grpc.CallOption) (*gen.Currencies, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserWatchlist", varargs...)
	ret0, _ := ret[0].(*gen.Currencies)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWatchlist indicates an expected call of GetUserWatchlist
func (mr *MockProfileServiceClientMockRecorder) GetUserWatchlist(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWatchlist", reflect.TypeOf((*MockProfileServiceClient)(nil).GetUserWatchlist), varargs...)
}

// GetUsers mocks base method
func (m *MockProfileServiceClient) GetUsers(ctx context.Context, in *gen.Empty, opts ...grpc.CallOption) (*gen.UsersCount, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUsers", varargs...)
	ret0, _ := ret[0].(*gen.UsersCount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers
func (mr *MockProfileServiceClientMockRecorder) GetUsers(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockProfileServiceClient)(nil).GetUsers), varargs...)
}

// GetAllPaymentHistory mocks base method
func (m *MockProfileServiceClient) GetAllPaymentHistory(ctx context.Context, in *gen.IncomeParameters, opts ...grpc.CallOption) (*gen.AllHistory, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllPaymentHistory", varargs...)
	ret0, _ := ret[0].(*gen.AllHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPaymentHistory indicates an expected call of GetAllPaymentHistory
func (mr *MockProfileServiceClientMockRecorder) GetAllPaymentHistory(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPaymentHistory", reflect.TypeOf((*MockProfileServiceClient)(nil).GetAllPaymentHistory), varargs...)
}

// AddToPaymentHistory mocks base method
func (m *MockProfileServiceClient) AddToPaymentHistory(ctx context.Context, in *gen.AddToHistory, opts ...grpc.CallOption) (*gen.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddToPaymentHistory", varargs...)
	ret0, _ := ret[0].(*gen.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddToPaymentHistory indicates an expected call of AddToPaymentHistory
func (mr *MockProfileServiceClientMockRecorder) AddToPaymentHistory(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToPaymentHistory", reflect.TypeOf((*MockProfileServiceClient)(nil).AddToPaymentHistory), varargs...)
}

// GetWallets mocks base method
func (m *MockProfileServiceClient) GetWallets(ctx context.Context, in *gen.UserID, opts ...grpc.CallOption) (*gen.Wallets, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWallets", varargs...)
	ret0, _ := ret[0].(*gen.Wallets)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWallets indicates an expected call of GetWallets
func (mr *MockProfileServiceClientMockRecorder) GetWallets(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWallets", reflect.TypeOf((*MockProfileServiceClient)(nil).GetWallets), varargs...)
}

// GetWallet mocks base method
func (m *MockProfileServiceClient) GetWallet(ctx context.Context, in *gen.ConcreteWallet, opts ...grpc.CallOption) (*gen.Wallet, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWallet", varargs...)
	ret0, _ := ret[0].(*gen.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWallet indicates an expected call of GetWallet
func (mr *MockProfileServiceClientMockRecorder) GetWallet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWallet", reflect.TypeOf((*MockProfileServiceClient)(nil).GetWallet), varargs...)
}

// SetWallet mocks base method
func (m *MockProfileServiceClient) SetWallet(ctx context.Context, in *gen.ToSetWallet, opts ...grpc.CallOption) (*gen.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetWallet", varargs...)
	ret0, _ := ret[0].(*gen.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetWallet indicates an expected call of SetWallet
func (mr *MockProfileServiceClientMockRecorder) SetWallet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWallet", reflect.TypeOf((*MockProfileServiceClient)(nil).SetWallet), varargs...)
}

// CheckWallet mocks base method
func (m *MockProfileServiceClient) CheckWallet(ctx context.Context, in *gen.ConcreteWallet, opts ...grpc.CallOption) (*gen.Check, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CheckWallet", varargs...)
	ret0, _ := ret[0].(*gen.Check)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckWallet indicates an expected call of CheckWallet
func (mr *MockProfileServiceClientMockRecorder) CheckWallet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckWallet", reflect.TypeOf((*MockProfileServiceClient)(nil).CheckWallet), varargs...)
}

// CreateInitialWallet mocks base method
func (m *MockProfileServiceClient) CreateInitialWallet(ctx context.Context, in *gen.UserID, opts ...grpc.CallOption) (*gen.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateInitialWallet", varargs...)
	ret0, _ := ret[0].(*gen.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInitialWallet indicates an expected call of CreateInitialWallet
func (mr *MockProfileServiceClientMockRecorder) CreateInitialWallet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInitialWallet", reflect.TypeOf((*MockProfileServiceClient)(nil).CreateInitialWallet), varargs...)
}

// CreateWallet mocks base method
func (m *MockProfileServiceClient) CreateWallet(ctx context.Context, in *gen.ConcreteWallet, opts ...grpc.CallOption) (*gen.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWallet", varargs...)
	ret0, _ := ret[0].(*gen.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWallet indicates an expected call of CreateWallet
func (mr *MockProfileServiceClientMockRecorder) CreateWallet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWallet", reflect.TypeOf((*MockProfileServiceClient)(nil).CreateWallet), varargs...)
}

// UpdateWallet mocks base method
func (m *MockProfileServiceClient) UpdateWallet(ctx context.Context, in *gen.ToSetWallet, opts ...grpc.CallOption) (*gen.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateWallet", varargs...)
	ret0, _ := ret[0].(*gen.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWallet indicates an expected call of UpdateWallet
func (mr *MockProfileServiceClientMockRecorder) UpdateWallet(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWallet", reflect.TypeOf((*MockProfileServiceClient)(nil).UpdateWallet), varargs...)
}

// GetIncome mocks base method
func (m *MockProfileServiceClient) GetIncome(ctx context.Context, in *gen.IncomeParameters, opts ...grpc.CallOption) (*gen.Income, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIncome", varargs...)
	ret0, _ := ret[0].(*gen.Income)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIncome indicates an expected call of GetIncome
func (mr *MockProfileServiceClientMockRecorder) GetIncome(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIncome", reflect.TypeOf((*MockProfileServiceClient)(nil).GetIncome), varargs...)
}

// GetAllIncomePerDay mocks base method
func (m *MockProfileServiceClient) GetAllIncomePerDay(ctx context.Context, in *gen.IncomeParameters, opts ...grpc.CallOption) (*gen.WalletStates, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAllIncomePerDay", varargs...)
	ret0, _ := ret[0].(*gen.WalletStates)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllIncomePerDay indicates an expected call of GetAllIncomePerDay
func (mr *MockProfileServiceClientMockRecorder) GetAllIncomePerDay(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllIncomePerDay", reflect.TypeOf((*MockProfileServiceClient)(nil).GetAllIncomePerDay), varargs...)
}

// PutPortfolio mocks base method
func (m *MockProfileServiceClient) PutPortfolio(ctx context.Context, in *gen.PortfolioValue, opts ...grpc.CallOption) (*gen.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PutPortfolio", varargs...)
	ret0, _ := ret[0].(*gen.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutPortfolio indicates an expected call of PutPortfolio
func (mr *MockProfileServiceClientMockRecorder) PutPortfolio(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutPortfolio", reflect.TypeOf((*MockProfileServiceClient)(nil).PutPortfolio), varargs...)
}

// MockProfileServiceServer is a mock of ProfileServiceServer interface
type MockProfileServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockProfileServiceServerMockRecorder
}

// MockProfileServiceServerMockRecorder is the mock recorder for MockProfileServiceServer
type MockProfileServiceServerMockRecorder struct {
	mock *MockProfileServiceServer
}

// NewMockProfileServiceServer creates a new mock instance
func NewMockProfileServiceServer(ctrl *gomock.Controller) *MockProfileServiceServer {
	mock := &MockProfileServiceServer{ctrl: ctrl}
	mock.recorder = &MockProfileServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProfileServiceServer) EXPECT() *MockProfileServiceServerMockRecorder {
	return m.recorder
}

// SaveUser mocks base method
func (m *MockProfileServiceServer) SaveUser(arg0 context.Context, arg1 *gen.User) (*gen.PublicUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUser", arg0, arg1)
	ret0, _ := ret[0].(*gen.PublicUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveUser indicates an expected call of SaveUser
func (mr *MockProfileServiceServerMockRecorder) SaveUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUser", reflect.TypeOf((*MockProfileServiceServer)(nil).SaveUser), arg0, arg1)
}

// UpdateUserAvatar mocks base method
func (m *MockProfileServiceServer) UpdateUserAvatar(arg0 context.Context, arg1 *gen.UpdateFields) (*gen.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserAvatar", arg0, arg1)
	ret0, _ := ret[0].(*gen.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserAvatar indicates an expected call of UpdateUserAvatar
func (mr *MockProfileServiceServerMockRecorder) UpdateUserAvatar(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserAvatar", reflect.TypeOf((*MockProfileServiceServer)(nil).UpdateUserAvatar), arg0, arg1)
}

// UpdateUserPassword mocks base method
func (m *MockProfileServiceServer) UpdateUserPassword(arg0 context.Context, arg1 *gen.UpdateFields) (*gen.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserPassword", arg0, arg1)
	ret0, _ := ret[0].(*gen.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserPassword indicates an expected call of UpdateUserPassword
func (mr *MockProfileServiceServerMockRecorder) UpdateUserPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserPassword", reflect.TypeOf((*MockProfileServiceServer)(nil).UpdateUserPassword), arg0, arg1)
}

// DeleteUser mocks base method
func (m *MockProfileServiceServer) DeleteUser(arg0 context.Context, arg1 *gen.UserID) (*gen.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(*gen.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUser indicates an expected call of DeleteUser
func (mr *MockProfileServiceServerMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockProfileServiceServer)(nil).DeleteUser), arg0, arg1)
}

// GetUserById mocks base method
func (m *MockProfileServiceServer) GetUserById(arg0 context.Context, arg1 *gen.UserID) (*gen.PublicUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", arg0, arg1)
	ret0, _ := ret[0].(*gen.PublicUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById
func (mr *MockProfileServiceServerMockRecorder) GetUserById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockProfileServiceServer)(nil).GetUserById), arg0, arg1)
}

// GetUserByLogin mocks base method
func (m *MockProfileServiceServer) GetUserByLogin(arg0 context.Context, arg1 *gen.User) (*gen.PublicUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByLogin", arg0, arg1)
	ret0, _ := ret[0].(*gen.PublicUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByLogin indicates an expected call of GetUserByLogin
func (mr *MockProfileServiceServerMockRecorder) GetUserByLogin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByLogin", reflect.TypeOf((*MockProfileServiceServer)(nil).GetUserByLogin), arg0, arg1)
}

// CheckExistence mocks base method
func (m *MockProfileServiceServer) CheckExistence(arg0 context.Context, arg1 *gen.User) (*gen.Check, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckExistence", arg0, arg1)
	ret0, _ := ret[0].(*gen.Check)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckExistence indicates an expected call of CheckExistence
func (mr *MockProfileServiceServerMockRecorder) CheckExistence(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckExistence", reflect.TypeOf((*MockProfileServiceServer)(nil).CheckExistence), arg0, arg1)
}

// GetPassword mocks base method
func (m *MockProfileServiceServer) GetPassword(arg0 context.Context, arg1 *gen.User) (*gen.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPassword", arg0, arg1)
	ret0, _ := ret[0].(*gen.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPassword indicates an expected call of GetPassword
func (mr *MockProfileServiceServerMockRecorder) GetPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPassword", reflect.TypeOf((*MockProfileServiceServer)(nil).GetPassword), arg0, arg1)
}

// GetUserWatchlist mocks base method
func (m *MockProfileServiceServer) GetUserWatchlist(arg0 context.Context, arg1 *gen.UserID) (*gen.Currencies, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserWatchlist", arg0, arg1)
	ret0, _ := ret[0].(*gen.Currencies)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWatchlist indicates an expected call of GetUserWatchlist
func (mr *MockProfileServiceServerMockRecorder) GetUserWatchlist(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWatchlist", reflect.TypeOf((*MockProfileServiceServer)(nil).GetUserWatchlist), arg0, arg1)
}

// GetUsers mocks base method
func (m *MockProfileServiceServer) GetUsers(arg0 context.Context, arg1 *gen.Empty) (*gen.UsersCount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", arg0, arg1)
	ret0, _ := ret[0].(*gen.UsersCount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers
func (mr *MockProfileServiceServerMockRecorder) GetUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockProfileServiceServer)(nil).GetUsers), arg0, arg1)
}

// GetAllPaymentHistory mocks base method
func (m *MockProfileServiceServer) GetAllPaymentHistory(arg0 context.Context, arg1 *gen.IncomeParameters) (*gen.AllHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPaymentHistory", arg0, arg1)
	ret0, _ := ret[0].(*gen.AllHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPaymentHistory indicates an expected call of GetAllPaymentHistory
func (mr *MockProfileServiceServerMockRecorder) GetAllPaymentHistory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPaymentHistory", reflect.TypeOf((*MockProfileServiceServer)(nil).GetAllPaymentHistory), arg0, arg1)
}

// AddToPaymentHistory mocks base method
func (m *MockProfileServiceServer) AddToPaymentHistory(arg0 context.Context, arg1 *gen.AddToHistory) (*gen.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToPaymentHistory", arg0, arg1)
	ret0, _ := ret[0].(*gen.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddToPaymentHistory indicates an expected call of AddToPaymentHistory
func (mr *MockProfileServiceServerMockRecorder) AddToPaymentHistory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToPaymentHistory", reflect.TypeOf((*MockProfileServiceServer)(nil).AddToPaymentHistory), arg0, arg1)
}

// GetWallets mocks base method
func (m *MockProfileServiceServer) GetWallets(arg0 context.Context, arg1 *gen.UserID) (*gen.Wallets, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWallets", arg0, arg1)
	ret0, _ := ret[0].(*gen.Wallets)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWallets indicates an expected call of GetWallets
func (mr *MockProfileServiceServerMockRecorder) GetWallets(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWallets", reflect.TypeOf((*MockProfileServiceServer)(nil).GetWallets), arg0, arg1)
}

// GetWallet mocks base method
func (m *MockProfileServiceServer) GetWallet(arg0 context.Context, arg1 *gen.ConcreteWallet) (*gen.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWallet", arg0, arg1)
	ret0, _ := ret[0].(*gen.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWallet indicates an expected call of GetWallet
func (mr *MockProfileServiceServerMockRecorder) GetWallet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWallet", reflect.TypeOf((*MockProfileServiceServer)(nil).GetWallet), arg0, arg1)
}

// SetWallet mocks base method
func (m *MockProfileServiceServer) SetWallet(arg0 context.Context, arg1 *gen.ToSetWallet) (*gen.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWallet", arg0, arg1)
	ret0, _ := ret[0].(*gen.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetWallet indicates an expected call of SetWallet
func (mr *MockProfileServiceServerMockRecorder) SetWallet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWallet", reflect.TypeOf((*MockProfileServiceServer)(nil).SetWallet), arg0, arg1)
}

// CheckWallet mocks base method
func (m *MockProfileServiceServer) CheckWallet(arg0 context.Context, arg1 *gen.ConcreteWallet) (*gen.Check, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckWallet", arg0, arg1)
	ret0, _ := ret[0].(*gen.Check)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckWallet indicates an expected call of CheckWallet
func (mr *MockProfileServiceServerMockRecorder) CheckWallet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckWallet", reflect.TypeOf((*MockProfileServiceServer)(nil).CheckWallet), arg0, arg1)
}

// CreateInitialWallet mocks base method
func (m *MockProfileServiceServer) CreateInitialWallet(arg0 context.Context, arg1 *gen.UserID) (*gen.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInitialWallet", arg0, arg1)
	ret0, _ := ret[0].(*gen.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInitialWallet indicates an expected call of CreateInitialWallet
func (mr *MockProfileServiceServerMockRecorder) CreateInitialWallet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInitialWallet", reflect.TypeOf((*MockProfileServiceServer)(nil).CreateInitialWallet), arg0, arg1)
}

// CreateWallet mocks base method
func (m *MockProfileServiceServer) CreateWallet(arg0 context.Context, arg1 *gen.ConcreteWallet) (*gen.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWallet", arg0, arg1)
	ret0, _ := ret[0].(*gen.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWallet indicates an expected call of CreateWallet
func (mr *MockProfileServiceServerMockRecorder) CreateWallet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWallet", reflect.TypeOf((*MockProfileServiceServer)(nil).CreateWallet), arg0, arg1)
}

// UpdateWallet mocks base method
func (m *MockProfileServiceServer) UpdateWallet(arg0 context.Context, arg1 *gen.ToSetWallet) (*gen.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWallet", arg0, arg1)
	ret0, _ := ret[0].(*gen.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWallet indicates an expected call of UpdateWallet
func (mr *MockProfileServiceServerMockRecorder) UpdateWallet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWallet", reflect.TypeOf((*MockProfileServiceServer)(nil).UpdateWallet), arg0, arg1)
}

// GetIncome mocks base method
func (m *MockProfileServiceServer) GetIncome(arg0 context.Context, arg1 *gen.IncomeParameters) (*gen.Income, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIncome", arg0, arg1)
	ret0, _ := ret[0].(*gen.Income)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIncome indicates an expected call of GetIncome
func (mr *MockProfileServiceServerMockRecorder) GetIncome(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIncome", reflect.TypeOf((*MockProfileServiceServer)(nil).GetIncome), arg0, arg1)
}

// GetAllIncomePerDay mocks base method
func (m *MockProfileServiceServer) GetAllIncomePerDay(arg0 context.Context, arg1 *gen.IncomeParameters) (*gen.WalletStates, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllIncomePerDay", arg0, arg1)
	ret0, _ := ret[0].(*gen.WalletStates)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllIncomePerDay indicates an expected call of GetAllIncomePerDay
func (mr *MockProfileServiceServerMockRecorder) GetAllIncomePerDay(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllIncomePerDay", reflect.TypeOf((*MockProfileServiceServer)(nil).GetAllIncomePerDay), arg0, arg1)
}

// PutPortfolio mocks base method
func (m *MockProfileServiceServer) PutPortfolio(arg0 context.Context, arg1 *gen.PortfolioValue) (*gen.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutPortfolio", arg0, arg1)
	ret0, _ := ret[0].(*gen.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutPortfolio indicates an expected call of PutPortfolio
func (mr *MockProfileServiceServerMockRecorder) PutPortfolio(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutPortfolio", reflect.TypeOf((*MockProfileServiceServer)(nil).PutPortfolio), arg0, arg1)
}
